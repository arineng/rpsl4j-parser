import jflex.core.OptionUtils
import jflex.generator.LexGenerator
import jflex.option.Options

buildscript {
    dependencies {
        classpath "de.jflex:jflex:1.8.2"
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
}

group = 'net.arin'
version = '1.84'
description = 'rpsl4j parser library'
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenLocal()
    mavenCentral()
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/arineng/rpsl4j-parser"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        jar(MavenPublication) {
            from components.java
        }
    }
}

def parserSrcDir = "${buildDir}/generated/sources/parsers/java/main/net/ripe/db/whois/common/generated/"

sourceSets {
    main {
        java.srcDirs += parserSrcDir
    }
}

test {
    useJUnit()
}

java {
    withSourcesJar()
}

dependencies {
    api 'commons-lang:commons-lang:2.6'
    api 'org.apache.commons:commons-lang3:3.0'
    api 'org.slf4j:slf4j-api:1.7.10'
    api 'joda-time:joda-time:2.7'
    api 'commons-codec:commons-codec:1.10'
    api 'com.google.guava:guava:18.0'
    api 'com.google.code.findbugs:jsr305:3.0.0'
    api 'com.googlecode.java-diff-utils:diffutils:1.3.0'
    api 'commons-io:commons-io:2.4'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest-library:1.3'
}

task generateParsers {
    inputs.dir("src/main/parser").withPropertyName("parser").withPathSensitivity(PathSensitivity.RELATIVE)
    outputs.dir(parserSrcDir).withPropertyName(parserSrcDir)
    outputs.cacheIf { true }
    doFirst {
        delete parserSrcDir
        mkdir parserSrcDir
        def containerId = UUID.randomUUID().toString()
        def containerTag = "arin/rpsl4j-parser-byaccj"
        exec {
            executable 'docker'
            args 'build', '-t', containerTag, "${projectDir}/src/main/parser"
        }
        exec {
            executable 'docker'
            args 'run', '--name', containerId
            args '-v', "${projectDir}/src/main/parser/byacc:/src", containerTag
        }
        exec {
            executable 'docker'
            args 'cp', "${containerId}:/tmp/generated-sources/.", parserSrcDir
        }
        exec {
            executable 'docker'
            args 'rm', "${containerId}"
        }
        fileTree("${projectDir}/src/main/parser/jflex").each { file ->
            OptionUtils.setDefaultOptions()
            OptionUtils.setDir(new File(parserSrcDir))
            Options.setRootDirectory(projectDir)
            new LexGenerator(file).generate()
        }
    }
}

compileJava.dependsOn generateParsers
